---
import { getCardA } from "../api/index.js";
let data = await getCardA();
let title = data.data.title;
let content = data.data.challenges;
---

<style lang="less">
  .containerA {
    background-color: rgb(239, 241, 245);
    width: 100%;
    @media screen and (max-width: 768px) {
      overflow: hidden;
    }
  }
  .container-card {
    height: auto;
    max-width: 1184px;
    margin: 0 auto;
    .container-text {
      font-size: 40px;
      font-weight: 700;
      line-height: 48px;
      color: rgb(0, 0, 0);
      text-align: center;
      padding: 60px 0px 32px;
      background-color: rgb(239, 241, 245);
      border-top: 0px none transparent;
      border-right: 0px none transparent;
      border-bottom: 0px none transparent;
      border-left: 0px none transparent;
      @media (max-width: 767px) {
        font-size: 28px;
        padding: 0 12px;
        padding: 45px 29px 32px;
      }
    }
    .container-box {
      display: flex;
      justify-content: space-between;
      padding-bottom: 60px;
      gap: 12px 12px;
      transition: transform 0.1s linear;
      @media (max-width: 767px) {
        width: 200%;
      }
      .container-box-less {
        flex: 1;
        background-color: #fff;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
        border-bottom-right-radius: 8px;
        border-bottom-left-radius: 8px;
        padding: 32px;
        box-shadow: rgba(175, 179, 186, 0.4) 1px 1px 6px 0px;
        @media (max-width: 767px) {
          flex: 0 0 25%;
        }
        .container-box-content {
          text-align: center;
          img {
            width: 48px;
            height: 48px;
          }
          .container-box-big {
            font-size: 16px;
            font-weight: 800;
            line-height: 24px;
            color: rgb(0, 0, 0);
            margin: 16px 0px 0px;
          }
          .container-box-small {
            font-size: 14px;
            font-weight: 400;
            line-height: 20px;
            color: rgb(74, 74, 74);
            text-align: center;
            margin: 8px 0px 16px;
          }
        }
      }
    }
  }
</style>
<div class="containerA">
  <div class="container-card">
    <div class="container-text">{title}</div>
    <div class="container-box">
      {
        content.map((item: any) => (
          <div class="container-box-less">
            <div class="container-box-content">
              <img
                src="https://promotion-static.tuyacn.com/static/fromLink/16472293619327addb29a.png"
                alt=""
              />
              <div class="container-box-big">{item.title}</div>
              <div class="container-box-small">{item.description}</div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</div>

<script>
  // 获取轮播容器和可视区域（父容器）
  let containerbox = document.querySelector(
    ".containerA .container-box"
  ) as HTMLElement;
  let wrapper = document.querySelector(".containerA") as HTMLElement;

  let touchX: number;
  let moveX: number;
  let initialTranslateX = 0;
  let minTranslateX = 0; // 最左边界

  // 手指按下时记录初始位置和当前 translateX
  containerbox.addEventListener("touchstart", function (e: TouchEvent) {
    touchX = e.touches[0].clientX;

    // 获取当前 translateX 值
    let computedStyle = window.getComputedStyle(containerbox);
    let matrix = new WebKitCSSMatrix(computedStyle.transform);
    initialTranslateX = matrix.m41 || 0;

    // 计算最左侧允许的 translateX 值
    // wrapper.offsetWidth 为可视区域宽度，
    // containerbox.offsetWidth 为轮播容器总宽度
    minTranslateX = wrapper.offsetWidth - containerbox.offsetWidth;
  });

  // 手指移动时计算新的 translateX，并限制在边界内
  containerbox.addEventListener("touchmove", function (e: TouchEvent) {
    moveX = e.touches[0].clientX - touchX;

    // 新的 translateX 值
    let newTranslateX = initialTranslateX + moveX;

    // 限制右侧：newTranslateX 不能大于 0
    if (newTranslateX > 0) {
      newTranslateX = 0;
    }
    // 限制左侧：newTranslateX 不能小于 minTranslateX
    if (newTranslateX < minTranslateX) {
      newTranslateX = minTranslateX;
    }

    containerbox.style.transform = `translateX(${newTranslateX}px)`;
  });
</script>
<script type="module">
  document.addEventListener("DOMContentLoaded", () => {
    // 仅在移动端（宽度小于768px）激活滑动效果
    if (window.innerWidth > 768) return;

    const containerBox = document.querySelector(".container-box");
    const containerCard = document.querySelector(".container-card");
    let startX = 0;
    let deltaX = 0;
    let isSwiping = false;
    let currentSlide = 0;
    // 每页显示两个，所以总页数 = 子项数量 / 2
    const totalSlides = containerBox.children.length / 2;
    // 获取父容器宽度作为一页的宽度
    let containerWidth = containerCard.clientWidth;

    containerBox.addEventListener("touchstart", (e) => {
      startX = e.touches[0].clientX;
      isSwiping = true;
      // 去掉过渡动画，方便跟随手势
      containerBox.style.transition = "none";
    });

    containerBox.addEventListener("touchmove", (e) => {
      if (!isSwiping) return;
      deltaX = e.touches[0].clientX - startX;
      // 实时更新偏移，当前偏移 = 当前页的基础偏移 + 滑动距离
      containerBox.style.transform = `translateX(${-currentSlide * containerWidth + deltaX}px)`;
    });

    containerBox.addEventListener("touchend", () => {
      isSwiping = false;
      // 设定滑动阈值，例如50px
      const threshold = 50;
      if (Math.abs(deltaX) > threshold) {
        // 向左滑动切换下一页，向右滑动切换上一页
        if (deltaX < 0 && currentSlide < totalSlides - 1) {
          currentSlide++;
        } else if (deltaX > 0 && currentSlide > 0) {
          currentSlide--;
        }
      }
      containerBox.style.transition = "transform 0.3s ease";
      containerBox.style.transform = `translateX(${-currentSlide * containerWidth}px)`;
      deltaX = 0;
    });

    // 窗口尺寸变化时更新容器宽度
    window.addEventListener("resize", () => {
      containerWidth = containerCard.clientWidth;
      containerBox.style.transition = "none";
      containerBox.style.transform = `translateX(${-currentSlide * containerWidth}px)`;
    });
  });
</script>
